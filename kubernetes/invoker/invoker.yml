---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: invoker
  namespace: openwhisk
  labels:
    name: invoker
spec:
  template:
    metadata:
      labels:
        name: invoker
    spec:
      restartPolicy: Always
      nodeSelector:
        openwhisk: "invoker"

      volumes:
      - name: cgroup
        hostPath:
          path: "/sys/fs/cgroup"
      - name: runc
        hostPath:
          path: "/run/runc"
      - name: dockerrootdir
        hostPath:
          path: "/var/lib/docker/containers"
      - name: dockersock
        hostPath:
          path: "/var/run/docker.sock"
      - name: apparmor
        hostPath:
          path: "/usr/lib/x86_64-linux-gnu/libapparmor.so.1"

      initContainers:
      - name: docker-pull-runtimes
        imagePullPolicy: Always
        image: openwhisk/kube-docker-pull
        volumeMounts:
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        env:
          # action runtimes
          - name: "RUNTIMES_MANIFEST"
            valueFrom:
              configMapKeyRef:
                name: whisk.runtimes
                key: runtimes

      containers:
      - name: invoker
        imagePullPolicy: Always
        image: openwhisk/invoker
        command: [ "/bin/bash", "-c", "COMPONENT_NAME=$(hostname | cut -d'-' -f2) /init.sh" ]
        ports:
        - name: invoker
          containerPort: 8080
        volumeMounts:
        - name: cgroup
          mountPath: "/sys/fs/cgroup"
        - name: runc
          mountPath: "/run/runc"
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: dockerrootdir
          mountPath: "/containers"
        - name: apparmor
          mountPath: "/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
        env:
          - name: "PORT"
            value: "8080"

          # Invoker name is name of the Kube node when using DaemonSet
          - name: "INVOKER_NAME"
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

          - name: "WHISK_API_HOST_NAME"
            valueFrom:
              configMapKeyRef:
                name: whisk.ingress
                key: api_host

          # Docker-related options
          - name: "INVOKER_CONTAINER_NETWORK"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: invoker_container_network
          - name: "INVOKER_CONTAINER_DNS"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: invoker_container_dns
          - name: "INVOKER_USE_RUNC"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: invoker_use_runc
          - name: "DOCKER_IMAGE_PREFIX"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: docker_image_prefix
          - name: "DOCKER_IMAGE_TAG"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: docker_image_tag
          - name: "DOCKER_REGISTRY"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: docker_registry

          # action runtimes
          - name: "RUNTIMES_MANIFEST"
            valueFrom:
              configMapKeyRef:
                name: whisk.runtimes
                key: runtimes

          # extra JVM arguments
          - name: "JAVA_OPTS"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: java_opts

          # extra Invoker arguments
          - name: "INVOKER_OPTS"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: invoker_opts

          # Recommend using "" because logs should go to stdout on kube
          - name: "WHISK_LOGS_DIR"
            valueFrom:
              configMapKeyRef:
                name: invoker.config
                key: invoker_logs_dir

          # properties for Kafka connection
          - name: "KAFKA_HOSTS"
            value: "$(KAFKA_SERVICE_HOST):$(KAFKA_SERVICE_PORT_KAFKA)"

          # properties for zookeeper connection
          - name: "ZOOKEEPER_HOSTS"
            value: "$(ZOOKEEPER_SERVICE_HOST):$(ZOOKEEPER_SERVICE_PORT_ZOOKEEPER)"

          # properties for DB connection
          - name: "DB_USERNAME"
            valueFrom:
              secretKeyRef:
                name: db.auth
                key: db_username
          - name: "DB_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: db.auth
                key: db_password
          - name:  "DB_PROTOCOL"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_protocol
          - name: "DB_HOST"
            value: "$(COUCHDB_SERVICE_HOST)"
          - name: "DB_PORT"
            value: "$(COUCHDB_SERVICE_PORT_COUCHDB)"
          - name: "DB_PROVIDER"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_provider
          - name: "DB_WHISK_ACTIVATIONS"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_whisk_activations
          - name: "DB_WHISK_ACTIONS"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_whisk_actions
          - name: "DB_WHISK_AUTHS"
            valueFrom:
              configMapKeyRef:
                name: db.config
                key: db_whisk_auths
