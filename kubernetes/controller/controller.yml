---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: controller
  namespace: openwhisk
  labels:
    name: controller
spec:
  replicas: 1
  serviceName: "controller"
  template:
    metadata:
      labels:
        name: controller
    spec:
      restartPolicy: Always

      affinity:
        # prefer to not run on an invoker node (only prefer because of single node clusters)
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: openwhisk-role
                operator: NotIn
                values:
                - invoker
        # prefer to run on a control-plane node
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: openwhisk-role
                operator: In
                values:
                - control-plane
        # do not allow more than 1 controller instance to run on a node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: name
                  operator: In
                  values:
                  - controller
            topologyKey: "kubernetes.io/hostname"

      containers:
      - name: controller
        imagePullPolicy: Always
        image: openwhisk/controller
        command: ["/bin/bash", "-c", "COMPONENT_NAME=$(hostname | cut -d'-' -f2) /init.sh `hostname | cut -d'-' -f2`"]
        ports:
        - name: controller
          containerPort: 8080
        env:
        # Properties for controller HA configuration
        # Must change these if changing number of replicas
        - name: "CONTROLLER_LOCALBOOKKEEPING"
          value: "TRUE"
        - name: "CONTROLLER_HA"
          value: "FALSE"
        - name: "CONTROLLER_INSTANCES"
          value: "1"
        - name: "AKKA_CLUSTER_SEED_NODES"
          value: "controller-0.controller.openwhisk"
        - name: "CONFIG_akka_actor_provider"
          value: "cluster"

        # extra JVM arguments
        - name: "JAVA_OPTS"
          valueFrom:
            configMapKeyRef:
              name: controller.config
              key: java_opts

        # extra controller arguments
        - name: "CONTROLLER_OPTS"
          valueFrom:
            configMapKeyRef:
              name: controller.config
              key: controller_opts

        # action runtimes
        - name: "RUNTIMES_MANIFEST"
          valueFrom:
            configMapKeyRef:
              name: whisk.runtimes
              key: runtimes

        # deployment version information
        - name:  "WHISK_VERSION_NAME"
          valueFrom:
            configMapKeyRef:
              name: whisk.config
              key: whisk_version_name
        - name:  "WHISK_VERSION_DATE"
          valueFrom:
            configMapKeyRef:
              name: whisk.config
              key: whisk_version_date
        - name: "WHISK_VERSION_BUILDNO"
          valueFrom:
            configMapKeyRef:
              name: whisk.config
              key: whisk_version_tag

        # specify limits
        - name: "LIMITS_ACTIONS_INVOKES_PERMINUTE"
          valueFrom:
            configMapKeyRef:
              name: whisk.limits
              key: actions_invokes_perMinute
        - name: "LIMITS_ACTIONS_INVOKES_CONCURRENT"
          valueFrom:
            configMapKeyRef:
              name: whisk.limits
              key: actions_invokes_concurrent
        - name: "LIMITS_ACTIONS_INVOKES_CONCURRENTINSYSTEM"
          valueFrom:
            configMapKeyRef:
              name: whisk.limits
              key: actions_invokes_concurrentInSystem
        - name: "LIMITS_TRIGGERS_FIRES_PERMINUTE"
          valueFrom:
            configMapKeyRef:
              name: whisk.limits
              key: triggers_fires_perMinute
        - name: "LIMITS_ACTIONS_SEQUENCE_MAXLENGTH"
          valueFrom:
            configMapKeyRef:
              name: whisk.limits
              key: actions_sequence_maxLength

        # properties for Kafka connection
        - name: "KAFKA_HOSTS"
          value: "$(KAFKA_SERVICE_HOST):$(KAFKA_SERVICE_PORT_KAFKA)"

        # properties for DB connection
        - name: "CONFIG_whisk_couchdb_username"
          valueFrom:
            secretKeyRef:
              name: db.auth
              key: db_username
        - name: "CONFIG_whisk_couchdb_password"
          valueFrom:
            secretKeyRef:
              name: db.auth
              key: db_password
        - name:  "CONFIG_whisk_couchdb_protocol"
          valueFrom:
            configMapKeyRef:
              name: db.config
              key: db_protocol
        - name: "CONFIG_whisk_couchdb_host"
          value: "$(COUCHDB_SERVICE_HOST)"
        - name: "CONFIG_whisk_couchdb_port"
          value: "$(COUCHDB_SERVICE_PORT_COUCHDB)"
        - name: "CONFIG_whisk_couchdb_provider"
          valueFrom:
            configMapKeyRef:
              name: db.config
              key: db_provider
        - name: "CONFIG_whisk_couchdb_databases_WhiskActivation"
          valueFrom:
            configMapKeyRef:
              name: db.config
              key: db_whisk_activations
        - name: "CONFIG_whisk_couchdb_databases_WhiskEntity"
          valueFrom:
            configMapKeyRef:
              name: db.config
              key: db_whisk_actions
        - name: "CONFIG_whisk_couchdb_databases_WhiskAuth"
          valueFrom:
            configMapKeyRef:
              name: db.config
              key: db_whisk_auths

        # must match port used in livenessProbe below
        - name: "PORT"
          value: "8080"

        livenessProbe:
          httpGet:
            path: "/ping"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: controller-netpol
  namespace: openwhisk
spec:
  podSelector:
    matchLabels:
      name: controller
  ingress:
  # Allow nginx and any pod with access=controller to connect to controller
  - from:
    - podSelector:
        matchLabels:
          name: nginx
    - podSelector:
        matchLabels:
          access: controller
    ports:
     - port: 8080
  # Controllers can connect to each other
  - from:
    - podSelector:
        matchLabels:
          name: controller
    ports:
     - port: 8080
     - port: 2552
