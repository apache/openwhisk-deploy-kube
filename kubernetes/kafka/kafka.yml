---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kafka
  namespace: openwhisk
  labels:
    name: kafka
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kafka
    spec:
      restartPolicy: Always
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: pv-kafka-01

      affinity:
        # prefer to not run on an invoker node (only prefer because of single node clusters)
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: openwhisk-role
                operator: NotIn
                values:
                - invoker
        # prefer to run on a control-plane node
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: openwhisk-role
                operator: In
                values:
                - control-plane
        # do not allow more than 1 kafka instance to run on a given node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - kafka
            topologyKey: "kubernetes.io/hostname"
        # prefer to co-locate with a zookeeper pod since we communicate frequently
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: name
                    operator: In
                    values:
                    - zookeeper
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: wurstmeister/kafka:0.11.0.1
        volumeMounts:
        - mountPath: /kafka
          name: kafka-data
        ports:
        - name: kafka
          containerPort: 9092
        env:
        - name: "KAFKA_BROKER_ID"
          value: "0"
        - name: "KAFKA_ADVERTISED_HOST_NAME"
          value: "$(KAFKA_SERVICE_HOST)"
        - name: "KAFKA_ADVERTISED_PORT"
          value: "$(KAFKA_SERVICE_PORT_KAFKA)"
        - name: "KAFKA_HOST_NAME"
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: "KAFKA_PORT"
          value: "$(KAFKA_SERVICE_PORT_KAFKA)"

        # zookeeper info
        - name: "KAFKA_ZOOKEEPER_CONNECT"
          value: "$(ZOOKEEPER_SERVICE_HOST):$(ZOOKEEPER_SERVICE_PORT_ZOOKEEPER)"

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kafka-netpol
  namespace: openwhisk
spec:
  podSelector:
    matchLabels:
      name: kafka
  ingress:
  # Allow invoker and controller to connect to kafka
  - from:
    - podSelector:
        matchLabels:
          name: controller
    - podSelector:
        matchLabels:
          name: invoker
    ports:
     - port: 9092
  # kafkas can connect to each other
  - from:
    - podSelector:
        matchLabels:
          name: kafka
    ports:
     - port: 9092
