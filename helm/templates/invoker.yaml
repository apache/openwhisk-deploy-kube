# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements; and to You under the Apache License, Version 2.0.

---
{{- if eq .Values.invoker.containerFactory.impl "docker" }}
apiVersion: extensions/v1beta1
kind: DaemonSet
{{- else if eq .Values.invoker.containerFactory.impl "kubernetes" -}}
apiVersion: apps/v1beta1
kind: StatefulSet
{{- end }}
metadata:
  name: {{ .Values.invoker.name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ .Values.invoker.name | quote }}
spec:
{{- if eq .Values.invoker.containerFactory.impl "kubernetes" }}
  replicas: {{ .Values.invoker.containerFactory.kubernetes.replicaCount }}
{{- end }}
  template:
    metadata:
      labels:
        name: {{ .Values.invoker.name | quote }}
    spec:
{{- if eq .Values.invoker.containerFactory.impl "kubernetes" }}
      serviceAccountName: {{ .Values.invoker.name | quote }}
{{- end }}
      restartPolicy: {{ .Values.invoker.restartPolicy }}

      affinity:
{{ include "affinity.invoker" . | indent 8 }}
{{- if eq .Values.invoker.containerFactory.impl "kubernetes" }}
{{ include "affinity.selfAntiAffinity" ( .Values.invoker.name | quote ) | indent 8 }}
{{- end }}

{{- if eq .Values.invoker.containerFactory.impl "docker" }}
      volumes:
{{ include "docker_volumes" . | indent 6 }}
{{- end }}

      initContainers:
      # Wait for a controller to be up (which implies kafka, zookeeper, couchdb are all up as well).
{{ include "readiness.waitForController" . | indent 6 }}

{{- if eq .Values.invoker.containerFactory.impl "docker" }}
      # Pull images for all default runtimes before starting invoker
{{ include "docker_pull_runtimes" . | indent 6 }}
{{- end }}

      containers:
      - name: {{ .Values.invoker.name | quote }}
        imagePullPolicy: {{ .Values.invoker.imagePullPolicy | quote }}
        image: {{ .Values.invoker.image | quote }}
        command: [ "/bin/bash", "-c", "COMPONENT_NAME=$(hostname | cut -d'-' -f2) /init.sh"]
        env:
          - name: "PORT"
            value: {{ .Values.invoker.port | quote }}
          - name: "WHISK_API_HOST_NAME"
            valueFrom:
              configMapKeyRef:
                name: whisk.ingress
                key: api_host
          - name: "INVOKER_CONTAINER_NETWORK"
            value: "bridge"
          - name: "CONFIG_whisk_docker_containerFactory_useRunc"
            value: "false"

          # Properties for invoker image
          - name: "DOCKER_IMAGE_PREFIX"
            value: "openwhisk"
          - name: "DOCKER_IMAGE_TAG"
            value: "latest"
          - name: "DOCKER_REGISTRY"
            value: ""

          # Invoker name is the name of the node (DaemonSet) or pod (StatefulSet)
          - name: "INVOKER_NAME"
            valueFrom:
              fieldRef:
                fieldPath: {{ if eq .Values.invoker.containerFactory.impl "docker" }} spec.nodeName {{ else }} metadata.name {{ end }}

          # Java options
          - name: "JAVA_OPTS"
            value: {{ .Values.invoker.jvmOptions | quote }}

          # Invoker options
          - name: "INVOKER_OPTS"
            value: "{{ .Values.invoker.options }} {{ if eq .Values.invoker.containerFactory.impl "docker" }} -Dwhisk.spi.ContainerFactoryProvider=whisk.core.containerpool.docker.DockerContainerFactoryProvider {{ else }} -Dkubernetes.master=https://$KUBERNETES_SERVICE_HOST -Dwhisk.spi.ContainerFactoryProvider=whisk.core.containerpool.kubernetes.KubernetesContainerFactoryProvider {{ end }}"

{{ if .Values.invoker.containerFactory.kubernetes.agent.enabled }}
          - name: "CONFIG_whisk_kubernetes_invokerAgent_enabled"
            value:  "TRUE"
          - name: "CONFIG_whisk_kubernetes_invokerAgent_port"
            value: {{ .Values.invoker.containerFactory.kubernetes.agent.port | quote }}
{{ end }}

          # action runtimes
          - name: "RUNTIMES_MANIFEST"
            value: {{ template "runtimes_manifest" . }}

          # Default to empty logs dir. This is because logs should go to stdout
          - name: "WHISK_LOGS_DIR"
            value: ""

          # this version is the day it is deployed,
          - name:  "WHISK_VERSION_DATE"
            value: "2017-01-01T00:00:00Z"

          # properties for DB connection
{{ include "whisk.dbEnvVars" . | indent 10 }}

          # properties for kafka connection
          - name: "KAFKA_HOSTS"
            value: "{{ include "kafka_host" . }}:{{ .Values.kafka.port }}"

          # properties for zookeeper connection
          - name: "ZOOKEEPER_HOSTS"
            value: "{{ include "zookeeper_host" . }}:{{ .Values.zookeeper.port }}"

        ports:
        - name: invoker
          containerPort: {{ .Values.invoker.port }}
{{- if eq .Values.invoker.containerFactory.impl "docker" }}
        volumeMounts:
{{ include "docker_volume_mounts" . | indent 8 }}
{{- end }}

{{ if .Values.invoker.containerFactory.kubernetes.agent.enabled }}
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ .Values.invoker.containerFactory.kubernetes.agent.name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ .Values.invoker.containerFactory.kubernetes.agent.name | quote }}
spec:
  template:
    metadata:
      labels:
        name: {{ .Values.invoker.containerFactory.kubernetes.agent.name | quote }}
    spec:
      restartPolicy: Always
      hostNetwork: true

      # TODO: disabled affinity until user-action pods are
      #       created by KubernetesContainerFacotry with the
      #       same affinity rules.
      #       Requires extension to upstream kube java client
      #       run only on nodes labeled with openwhisk-role=invoker

      volumes:
{{ include "docker_volumes" . | indent 6 }}
      - name: userlogs
        emptyDir: {}

      initContainers:
      # Pull images for all default runtimes before starting invoker
{{ include "docker_pull_runtimes" . | indent 6 }}

      containers:
      - name: {{ .Values.invoker.containerFactory.kubernetes.agent.name | quote }}
        imagePullPolicy: {{ .Values.invoker.imagePullPolicy | quote }}
        image: {{ .Values.invoker.containerFactory.kubernetes.agent.image }}
        securityContext:
          privileged: true
        ports:
        - name: agent
          containerPort: {{ .Values.invoker.containerFactory.kubernetes.agent.port }}
        volumeMounts:
{{ include "docker_volume_mounts" . | indent 8 }}
        - name: userlogs
          mountPath: "/action-logs"
{{- end }}
