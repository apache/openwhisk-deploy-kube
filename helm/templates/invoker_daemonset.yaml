apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ template "invoker_deployment_name" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ template "invoker_deployment_name" . }}
spec:
  template:
    metadata:
      labels:
        name: {{ template "invoker_deployment_name" . }}
    spec:
      restartPolicy: Always

      affinity:
{{ include "affinity.invoker" . | indent 8 }}

      volumes:
      - name: cgroup
        hostPath:
          path: "/sys/fs/cgroup"
      - name: runc
        hostPath:
          path: "/run/runc"
      - name: dockerrootdir
        hostPath:
          path: "/var/lib/docker/containers"
      - name: dockersock
        hostPath:
          path: "/var/run/docker.sock"

      initContainers:
      # Wait for a controller to be up (which implies kafka, zookeeper, couchdb are all up as well).
{{ include "readiness.waitForController" . | indent 6 }}

      # Pull images for all default runtimes before starting invoker
      - name: docker-pull-runtimes
        imagePullPolicy: "IfNotPresent"
        image: openwhisk/kube-docker-pull
        volumeMounts:
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        env:
          # action runtimes
          - name: "RUNTIMES_MANIFEST"
            value: {{ template "runtimes_manifest" . }}

      containers:
      - name: {{ template "invoker_deployment_name" . }}
        imagePullPolicy: {{ .Values.invokerImagePullPolicy | default "IfNotPresent" | quote }}
        image: {{ .Values.invokerImage | default "openwhisk/invoker" | quote }}
        command: [ "/bin/bash", "-c", "COMPONENT_NAME=$(hostname | cut -d'-' -f2) /init.sh"]
        resources:
          requests:
            memory: "100Mi"
            cpu: "0.1"
        env:
          - name: "PORT"
            value: "8080"
          - name: "WHISK_API_HOST_NAME"
            valueFrom:
              configMapKeyRef:
                name: whisk.ingress
                key: api_host
          - name: "INVOKER_CONTAINER_NETWORK"
            value: "bridge"
          - name: "CONFIG_whisk_docker_containerFactory_useRunc"
            value: "false"

          # Properties for invoker image
          - name: "DOCKER_IMAGE_PREFIX"
            value: "openwhisk"
          - name: "DOCKER_IMAGE_TAG"
            value: "latest"
          - name: "DOCKER_REGISTRY"
            value: ""

          # Invoker name is name of the Kube node when using DaemonSet
          - name: "INVOKER_NAME"
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

          # Java options
          - name: "JAVA_OPTS"
            value: "-Xmx2g"

          # Invoker options
          - name: "INVOKER_OPTS"
            value: {{ .Values.invokerOptions | quote }}

          # action runtimes
          - name: "RUNTIMES_MANIFEST"
            value: {{ template "runtimes_manifest" . }}

          # Default to empty logs dir. This is because logs should go to stdout
          - name: "WHISK_LOGS_DIR"
            value: ""

          # this version is the day it is deployed,
          - name:  "WHISK_VERSION_DATE"
            value: "2017-01-01T00:00:00Z"

          # properties for DB connection
{{ include "whisk.dbEnvVars" . | indent 10 }}

          # properties for kafka connection
          - name: "KAFKA_HOSTS"
            value: "{{ .Values.global.kafkaServiceName }}.{{ .Release.Namespace }}:{{ .Values.global.kafkaPort | default 9092 }}"

          # properties for zookeeper connection
          - name: "ZOOKEEPER_HOSTS"
            value: "{{ .Values.global.zookeeperServiceName }}.{{ .Release.Namespace }}:{{ .Values.global.zookeeperPort | default 2181 }}"

        ports:
        - name: invoker
          containerPort: 8080
        volumeMounts:
        - name: cgroup
          mountPath: "/sys/fs/cgroup"
        - name: runc
          mountPath: "/run/runc"
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        - name: dockerrootdir
          mountPath: "/containers"
