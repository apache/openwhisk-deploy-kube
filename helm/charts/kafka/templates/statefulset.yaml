apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "kafka_statefulset_name" . }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  serviceName: {{ template "kafka_service_name" . }} 
  replicas: {{ .Values.replicaCount | default 1 }}
  template:
    metadata:
      labels:
        app: {{ template "kafka_statefulset_name" . }}
    spec:
      {{- if .Values.global.affinity.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodeType
                operator: In
                values:
                - {{ .Values.global.affinity.kafkaNodeLabel }}
      {{- end }}

      initContainers:
      - name: "wait-for-zookeeper"
        image: "busybox"
        imagePullPolicy: "IfNotPresent"
        command: ["sh", "-c", "result=1; until [ $result -eq 0 ]; do nslookup {{ .Values.global.zookeeperServiceName}}.{{ .Release.Namespace }}; result=$?; echo waiting for {{ .Values.global.zookeeperServiceName}}.{{ .Release.Namespace }}; sleep 1; done;"]

      containers:
      - name: {{ template "kafka_statefulset_name" . }}
        image: {{ .Values.image | default "wurstmeister/kafka:0.11.0.1" | quote }}
        imagePullPolicy: {{ .Values.imagePullPolicy | default "IfNotPresent" | quote }}
        ports:
        - containerPort: {{ template "kafka_port" . }}
          name: kafka
        env:
        - name: "KAFKA_BROKER_ID"
          value: "0"
        - name: "KAFKA_ADVERTISED_HOST_NAME"
          value: {{ template "kafka_statefulset_name" . }}
        - name: "KAFKA_ADVERTISED_PORT"
          value: "{{ template "kafka_port" .}}"
        - name: "KAFKA_HOST_NAME"
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: "KAFKA_PORT"
          value: "{{ template "kafka_port" .}}"

        # zookeeper info
        - name: "KAFKA_ZOOKEEPER_CONNECT"
          value: {{ include "zookeeper_service_address" . | quote }}
